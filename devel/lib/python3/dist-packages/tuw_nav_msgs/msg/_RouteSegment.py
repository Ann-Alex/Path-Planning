# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tuw_nav_msgs/RouteSegment.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class RouteSegment(genpy.Message):
  _md5sum = "26469c8984f3cdfc24371244c703f828"
  _type = "tuw_nav_msgs/RouteSegment"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
uint32 id                     # Segment id
uint8 type                    # Segment type
                              # NA      = 0
                              # LINE    = 1
                              # ARC     = 2
                              # SPIROS  = 3
                              # SPLINE  = 4
uint8 orientation             # Segment orientation
                              # CLOCKWISE  = 0
                              # COUNTER_CLOCKWISE  = 1
uint8 motion_type             # Motion type
                              # NA = 0
                              # FLAT = 1
                              # DWA_SLOW = 2
                              # DWA_FAST = 3
                              # MPC_SLOW = 4
                              # MPC_FAST = 5
                              # PI_SLOW = 6
                              # PI_FAST = 7
geometry_msgs/Pose start
geometry_msgs/Pose end
geometry_msgs/Pose center    
int8 level


================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['id','type','orientation','motion_type','start','end','center','level']
  _slot_types = ['uint32','uint8','uint8','uint8','geometry_msgs/Pose','geometry_msgs/Pose','geometry_msgs/Pose','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,type,orientation,motion_type,start,end,center,level

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RouteSegment, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.type is None:
        self.type = 0
      if self.orientation is None:
        self.orientation = 0
      if self.motion_type is None:
        self.motion_type = 0
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.end is None:
        self.end = geometry_msgs.msg.Pose()
      if self.center is None:
        self.center = geometry_msgs.msg.Pose()
      if self.level is None:
        self.level = 0
    else:
      self.id = 0
      self.type = 0
      self.orientation = 0
      self.motion_type = 0
      self.start = geometry_msgs.msg.Pose()
      self.end = geometry_msgs.msg.Pose()
      self.center = geometry_msgs.msg.Pose()
      self.level = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_I3B21db().pack(_x.id, _x.type, _x.orientation, _x.motion_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.end.position.x, _x.end.position.y, _x.end.position.z, _x.end.orientation.x, _x.end.orientation.y, _x.end.orientation.z, _x.end.orientation.w, _x.center.position.x, _x.center.position.y, _x.center.position.z, _x.center.orientation.x, _x.center.orientation.y, _x.center.orientation.z, _x.center.orientation.w, _x.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.end is None:
        self.end = geometry_msgs.msg.Pose()
      if self.center is None:
        self.center = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 176
      (_x.id, _x.type, _x.orientation, _x.motion_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.end.position.x, _x.end.position.y, _x.end.position.z, _x.end.orientation.x, _x.end.orientation.y, _x.end.orientation.z, _x.end.orientation.w, _x.center.position.x, _x.center.position.y, _x.center.position.z, _x.center.orientation.x, _x.center.orientation.y, _x.center.orientation.z, _x.center.orientation.w, _x.level,) = _get_struct_I3B21db().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_I3B21db().pack(_x.id, _x.type, _x.orientation, _x.motion_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.end.position.x, _x.end.position.y, _x.end.position.z, _x.end.orientation.x, _x.end.orientation.y, _x.end.orientation.z, _x.end.orientation.w, _x.center.position.x, _x.center.position.y, _x.center.position.z, _x.center.orientation.x, _x.center.orientation.y, _x.center.orientation.z, _x.center.orientation.w, _x.level))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.Pose()
      if self.end is None:
        self.end = geometry_msgs.msg.Pose()
      if self.center is None:
        self.center = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 176
      (_x.id, _x.type, _x.orientation, _x.motion_type, _x.start.position.x, _x.start.position.y, _x.start.position.z, _x.start.orientation.x, _x.start.orientation.y, _x.start.orientation.z, _x.start.orientation.w, _x.end.position.x, _x.end.position.y, _x.end.position.z, _x.end.orientation.x, _x.end.orientation.y, _x.end.orientation.z, _x.end.orientation.w, _x.center.position.x, _x.center.position.y, _x.center.position.z, _x.center.orientation.x, _x.center.orientation.y, _x.center.orientation.z, _x.center.orientation.w, _x.level,) = _get_struct_I3B21db().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I3B21db = None
def _get_struct_I3B21db():
    global _struct_I3B21db
    if _struct_I3B21db is None:
        _struct_I3B21db = struct.Struct("<I3B21db")
    return _struct_I3B21db
