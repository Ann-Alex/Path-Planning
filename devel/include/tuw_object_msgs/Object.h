// Generated by gencpp from file tuw_object_msgs/Object.msg
// DO NOT EDIT!


#ifndef TUW_OBJECT_MSGS_MESSAGE_OBJECT_H
#define TUW_OBJECT_MSGS_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>

namespace tuw_object_msgs
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : ids()
    , shape(0)
    , shape_variables()
    , ids_confidence()
    , pose()
    , twist()  {
    }
  Object_(const ContainerAllocator& _alloc)
    : ids(_alloc)
    , shape(0)
    , shape_variables(_alloc)
    , ids_confidence(_alloc)
    , pose(_alloc)
    , twist(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _ids_type;
  _ids_type ids;

   typedef int32_t _shape_type;
  _shape_type shape;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _shape_variables_type;
  _shape_variables_type shape_variables;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _ids_confidence_type;
  _ids_confidence_type ids_confidence;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SHAPE_UNKOWN)
  #undef SHAPE_UNKOWN
#endif
#if defined(_WIN32) && defined(SHAPE_POINT)
  #undef SHAPE_POINT
#endif
#if defined(_WIN32) && defined(SHAPE_CIRCLE)
  #undef SHAPE_CIRCLE
#endif
#if defined(_WIN32) && defined(SHAPE_ELLIPSE)
  #undef SHAPE_ELLIPSE
#endif
#if defined(_WIN32) && defined(SHAPE_SQUARE)
  #undef SHAPE_SQUARE
#endif
#if defined(_WIN32) && defined(SHAPE_RECTANGLE)
  #undef SHAPE_RECTANGLE
#endif
#if defined(_WIN32) && defined(SHAPE_HULL)
  #undef SHAPE_HULL
#endif
#if defined(_WIN32) && defined(SHAPE_LINE)
  #undef SHAPE_LINE
#endif
#if defined(_WIN32) && defined(SHAPE_SPHERE)
  #undef SHAPE_SPHERE
#endif
#if defined(_WIN32) && defined(SHAPE_ELLIPSOID)
  #undef SHAPE_ELLIPSOID
#endif
#if defined(_WIN32) && defined(SHAPE_CUBE)
  #undef SHAPE_CUBE
#endif
#if defined(_WIN32) && defined(SHAPE_BOX)
  #undef SHAPE_BOX
#endif
#if defined(_WIN32) && defined(SHAPE_MESH)
  #undef SHAPE_MESH
#endif
#if defined(_WIN32) && defined(SHAPE_TRAFFIC_CONE)
  #undef SHAPE_TRAFFIC_CONE
#endif
#if defined(_WIN32) && defined(SHAPE_DOOR)
  #undef SHAPE_DOOR
#endif
#if defined(_WIN32) && defined(SHAPE_MAP_DOOR)
  #undef SHAPE_MAP_DOOR
#endif
#if defined(_WIN32) && defined(SHAPE_PERSON)
  #undef SHAPE_PERSON
#endif
#if defined(_WIN32) && defined(SHAPE_VEHICLE)
  #undef SHAPE_VEHICLE
#endif
#if defined(_WIN32) && defined(SHAPE_FIDUCIAL)
  #undef SHAPE_FIDUCIAL
#endif
#if defined(_WIN32) && defined(SHAPE_CONE)
  #undef SHAPE_CONE
#endif

  enum {
    SHAPE_UNKOWN = 0,
    SHAPE_POINT = 1,
    SHAPE_CIRCLE = 2,
    SHAPE_ELLIPSE = 3,
    SHAPE_SQUARE = 4,
    SHAPE_RECTANGLE = 5,
    SHAPE_HULL = 6,
    SHAPE_LINE = 7,
    SHAPE_SPHERE = 102,
    SHAPE_ELLIPSOID = 103,
    SHAPE_CUBE = 104,
    SHAPE_BOX = 105,
    SHAPE_MESH = 106,
    SHAPE_TRAFFIC_CONE = 201,
    SHAPE_DOOR = 202,
    SHAPE_MAP_DOOR = 212,
    SHAPE_PERSON = 203,
    SHAPE_VEHICLE = 204,
    SHAPE_FIDUCIAL = 205,
    SHAPE_CONE = 206,
  };


  typedef boost::shared_ptr< ::tuw_object_msgs::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_object_msgs::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::tuw_object_msgs::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::tuw_object_msgs::Object > ObjectPtr;
typedef boost::shared_ptr< ::tuw_object_msgs::Object const> ObjectConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_object_msgs::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_object_msgs::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_object_msgs::Object_<ContainerAllocator1> & lhs, const ::tuw_object_msgs::Object_<ContainerAllocator2> & rhs)
{
  return lhs.ids == rhs.ids &&
    lhs.shape == rhs.shape &&
    lhs.shape_variables == rhs.shape_variables &&
    lhs.ids_confidence == rhs.ids_confidence &&
    lhs.pose == rhs.pose &&
    lhs.twist == rhs.twist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_object_msgs::Object_<ContainerAllocator1> & lhs, const ::tuw_object_msgs::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_object_msgs::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_object_msgs::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_object_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_object_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_object_msgs::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_object_msgs::Object_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_object_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5044ab142c144bddb9b438207ccdb786";
  }

  static const char* value(const ::tuw_object_msgs::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5044ab142c144bddULL;
  static const uint64_t static_value2 = 0xb9b438207ccdb786ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_object_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_object_msgs/Object";
  }

  static const char* value(const ::tuw_object_msgs::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_object_msgs::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This expresses a object in a 3D space\n"
"int32[] ids                  # possible ids of the detected object (empty if no id could be identified/assigned)\n"
"int32   shape                # shape type (possible types are listed below)\n"
"float64[] shape_variables    # variables correspoding to the shape of the object (possible types are listed below)\n"
"float64[] ids_confidence     # confidence of the possible ids in [0, 1]\n"
"geometry_msgs/Pose pose      # pose of the detected object\n"
"geometry_msgs/Twist twist    # twist of the detected object\n"
"\n"
"# SHAPE_TYPE                      # SHAPE_VARIABLES\n"
"# ====================================================\n"
"int32 SHAPE_UNKOWN           = 0  # []\n"
"int32 SHAPE_POINT            = 1  # []\n"
"int32 SHAPE_CIRCLE           = 2  # [radius]\n"
"int32 SHAPE_ELLIPSE          = 3  # [radius1, radius2]\n"
"int32 SHAPE_SQUARE           = 4  # [width]\n"
"int32 SHAPE_RECTANGLE        = 5  # [length, width]\n"
"int32 SHAPE_HULL             = 6  # [p0, p1, p2, ...]\n"
"int32 SHAPE_LINE             = 7  # [] or [length] \n"
"\n"
"int32 SHAPE_SPHERE           = 102\n"
"int32 SHAPE_ELLIPSOID        = 103\n"
"int32 SHAPE_CUBE             = 104\n"
"int32 SHAPE_BOX              = 105\n"
"int32 SHAPE_MESH             = 106\n"
"\n"
"int32 SHAPE_TRAFFIC_CONE     = 201 # [radius, color(1 = blue, 2 = yellow, 3 = red)] \n"
"int32 SHAPE_DOOR             = 202 # [width, height, opening angle (0=closed), nr of door leafs, clockwise (0) counterclockwise (1)]\n"
"int32 SHAPE_MAP_DOOR         = 212 # for doors already mapped, same parameters as usual door\n"
"int32 SHAPE_PERSON           = 203\n"
"int32 SHAPE_VEHICLE          = 204\n"
"int32 SHAPE_FIDUCIAL         = 205\n"
"int32 SHAPE_CONE             = 206 # [radius, height]\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tuw_object_msgs::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_object_msgs::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ids);
      stream.next(m.shape);
      stream.next(m.shape_variables);
      stream.next(m.ids_confidence);
      stream.next(m.pose);
      stream.next(m.twist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_object_msgs::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_object_msgs::Object_<ContainerAllocator>& v)
  {
    s << indent << "ids[]" << std::endl;
    for (size_t i = 0; i < v.ids.size(); ++i)
    {
      s << indent << "  ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.ids[i]);
    }
    s << indent << "shape: ";
    Printer<int32_t>::stream(s, indent + "  ", v.shape);
    s << indent << "shape_variables[]" << std::endl;
    for (size_t i = 0; i < v.shape_variables.size(); ++i)
    {
      s << indent << "  shape_variables[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.shape_variables[i]);
    }
    s << indent << "ids_confidence[]" << std::endl;
    for (size_t i = 0; i < v.ids_confidence.size(); ++i)
    {
      s << indent << "  ids_confidence[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ids_confidence[i]);
    }
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_OBJECT_MSGS_MESSAGE_OBJECT_H
