// Generated by gencpp from file tuw_object_msgs/ObjectDetection.msg
// DO NOT EDIT!


#ifndef TUW_OBJECT_MSGS_MESSAGE_OBJECTDETECTION_H
#define TUW_OBJECT_MSGS_MESSAGE_OBJECTDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Quaternion.h>
#include <tuw_object_msgs/ObjectWithCovariance.h>

namespace tuw_object_msgs
{
template <class ContainerAllocator>
struct ObjectDetection_
{
  typedef ObjectDetection_<ContainerAllocator> Type;

  ObjectDetection_()
    : header()
    , distance_min(0.0)
    , distance_max(0.0)
    , distance_max_id(0.0)
    , view_direction()
    , fov_horizontal(0.0)
    , fov_vertical(0.0)
    , type()
    , objects()
    , sensor_type()  {
    }
  ObjectDetection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distance_min(0.0)
    , distance_max(0.0)
    , distance_max_id(0.0)
    , view_direction(_alloc)
    , fov_horizontal(0.0)
    , fov_vertical(0.0)
    , type(_alloc)
    , objects(_alloc)
    , sensor_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _distance_min_type;
  _distance_min_type distance_min;

   typedef float _distance_max_type;
  _distance_max_type distance_max;

   typedef float _distance_max_id_type;
  _distance_max_id_type distance_max_id;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _view_direction_type;
  _view_direction_type view_direction;

   typedef float _fov_horizontal_type;
  _fov_horizontal_type fov_horizontal;

   typedef float _fov_vertical_type;
  _fov_vertical_type fov_vertical;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::vector< ::tuw_object_msgs::ObjectWithCovariance_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tuw_object_msgs::ObjectWithCovariance_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_type_type;
  _sensor_type_type sensor_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OBJECT_TYPE_PERSON)
  #undef OBJECT_TYPE_PERSON
#endif
#if defined(_WIN32) && defined(OBJECT_TYPE_OBSTACLE)
  #undef OBJECT_TYPE_OBSTACLE
#endif
#if defined(_WIN32) && defined(OBJECT_TYPE_TRAFFIC_CONE)
  #undef OBJECT_TYPE_TRAFFIC_CONE
#endif
#if defined(_WIN32) && defined(OBJECT_TYPE_DOOR)
  #undef OBJECT_TYPE_DOOR
#endif
#if defined(_WIN32) && defined(SENSOR_TYPE_GENERIC_LASER_2D)
  #undef SENSOR_TYPE_GENERIC_LASER_2D
#endif
#if defined(_WIN32) && defined(SENSOR_TYPE_GENERIC_LASER_3D)
  #undef SENSOR_TYPE_GENERIC_LASER_3D
#endif
#if defined(_WIN32) && defined(SENSOR_TYPE_GENERIC_MONOCULAR_VISION)
  #undef SENSOR_TYPE_GENERIC_MONOCULAR_VISION
#endif
#if defined(_WIN32) && defined(SENSOR_TYPE_GENERIC_STEREO_VISION)
  #undef SENSOR_TYPE_GENERIC_STEREO_VISION
#endif
#if defined(_WIN32) && defined(SENSOR_TYPE_GENERIC_RGBD)
  #undef SENSOR_TYPE_GENERIC_RGBD
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OBJECT_TYPE_PERSON;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OBJECT_TYPE_OBSTACLE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OBJECT_TYPE_TRAFFIC_CONE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OBJECT_TYPE_DOOR;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SENSOR_TYPE_GENERIC_LASER_2D;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SENSOR_TYPE_GENERIC_LASER_3D;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SENSOR_TYPE_GENERIC_MONOCULAR_VISION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SENSOR_TYPE_GENERIC_STEREO_VISION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SENSOR_TYPE_GENERIC_RGBD;

  typedef boost::shared_ptr< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectDetection_

typedef ::tuw_object_msgs::ObjectDetection_<std::allocator<void> > ObjectDetection;

typedef boost::shared_ptr< ::tuw_object_msgs::ObjectDetection > ObjectDetectionPtr;
typedef boost::shared_ptr< ::tuw_object_msgs::ObjectDetection const> ObjectDetectionConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::OBJECT_TYPE_PERSON =
        
          "person"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::OBJECT_TYPE_OBSTACLE =
        
          "obstacle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::OBJECT_TYPE_TRAFFIC_CONE =
        
          "traffic_cone"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::OBJECT_TYPE_DOOR =
        
          "door"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::SENSOR_TYPE_GENERIC_LASER_2D =
        
          "laser2d"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::SENSOR_TYPE_GENERIC_LASER_3D =
        
          "laser3d"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::SENSOR_TYPE_GENERIC_MONOCULAR_VISION =
        
          "mono"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::SENSOR_TYPE_GENERIC_STEREO_VISION =
        
          "stereo"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      ObjectDetection_<ContainerAllocator>::SENSOR_TYPE_GENERIC_RGBD =
        
          "rgbd"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator1> & lhs, const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.distance_min == rhs.distance_min &&
    lhs.distance_max == rhs.distance_max &&
    lhs.distance_max_id == rhs.distance_max_id &&
    lhs.view_direction == rhs.view_direction &&
    lhs.fov_horizontal == rhs.fov_horizontal &&
    lhs.fov_vertical == rhs.fov_vertical &&
    lhs.type == rhs.type &&
    lhs.objects == rhs.objects &&
    lhs.sensor_type == rhs.sensor_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator1> & lhs, const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_object_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cea12636c449cb6bd42fd7019d49b395";
  }

  static const char* value(const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcea12636c449cb6bULL;
  static const uint64_t static_value2 = 0xd42fd7019d49b395ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_object_msgs/ObjectDetection";
  }

  static const char* value(const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This expresses a object detection\n"
"Header header                                 # timestamp in the header is the acquisition time and frame\n"
"\n"
"float32 distance_min                          # distance minimum range value [m]\n"
"float32 distance_max                          # distance maximum range value [m]\n"
"float32 distance_max_id                       # distance maximum range value to detect id [m]\n"
"\n"
"geometry_msgs/Quaternion view_direction       # view direction\n"
"float32 fov_horizontal                        # field of view horizontal [rad]\n"
"float32 fov_vertical                          # field of view vertical [rad]\n"
"\n"
"string   type                                 # object type used (person, obstacle, ...)\n"
"\n"
"ObjectWithCovariance[] objects                # detected objects (with covariance)\n"
"\n"
"string          sensor_type                      # Sensor / detector type, see example constants below.\n"
"\n"
"# object type constants\n"
"string OBJECT_TYPE_PERSON = person\n"
"string OBJECT_TYPE_OBSTACLE = obstacle\n"
"string OBJECT_TYPE_TRAFFIC_CONE = traffic_cone\n"
"string OBJECT_TYPE_DOOR = door\n"
"\n"
"# sensor type constants\n"
"string          SENSOR_TYPE_GENERIC_LASER_2D = laser2d\n"
"string          SENSOR_TYPE_GENERIC_LASER_3D = laser3d\n"
"string          SENSOR_TYPE_GENERIC_MONOCULAR_VISION = mono\n"
"string          SENSOR_TYPE_GENERIC_STEREO_VISION = stereo\n"
"string          SENSOR_TYPE_GENERIC_RGBD = rgbd\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: tuw_object_msgs/ObjectWithCovariance\n"
"# This expresses a object in free space with uncertainty.\n"
"\n"
"Object object\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"\n"
"float64[] covariance_pose   # pose covariance if it exists it will be 3x3 or 6x6\n"
"float64[] covariance_twist  # twist covariance if it exists it will be 3x3 or 6x6\n"
"float64[] correlation       # correlation between pose and twist if it exists it will be 3x3 or 6x6\n"
"================================================================================\n"
"MSG: tuw_object_msgs/Object\n"
"# This expresses a object in a 3D space\n"
"int32[] ids                  # possible ids of the detected object (empty if no id could be identified/assigned)\n"
"int32   shape                # shape type (possible types are listed below)\n"
"float64[] shape_variables    # variables correspoding to the shape of the object (possible types are listed below)\n"
"float64[] ids_confidence     # confidence of the possible ids in [0, 1]\n"
"geometry_msgs/Pose pose      # pose of the detected object\n"
"geometry_msgs/Twist twist    # twist of the detected object\n"
"\n"
"# SHAPE_TYPE                      # SHAPE_VARIABLES\n"
"# ====================================================\n"
"int32 SHAPE_UNKOWN           = 0  # []\n"
"int32 SHAPE_POINT            = 1  # []\n"
"int32 SHAPE_CIRCLE           = 2  # [radius]\n"
"int32 SHAPE_ELLIPSE          = 3  # [radius1, radius2]\n"
"int32 SHAPE_SQUARE           = 4  # [width]\n"
"int32 SHAPE_RECTANGLE        = 5  # [length, width]\n"
"int32 SHAPE_HULL             = 6  # [p0, p1, p2, ...]\n"
"int32 SHAPE_LINE             = 7  # [] or [length] \n"
"\n"
"int32 SHAPE_SPHERE           = 102\n"
"int32 SHAPE_ELLIPSOID        = 103\n"
"int32 SHAPE_CUBE             = 104\n"
"int32 SHAPE_BOX              = 105\n"
"int32 SHAPE_MESH             = 106\n"
"\n"
"int32 SHAPE_TRAFFIC_CONE     = 201 # [radius, color(1 = blue, 2 = yellow, 3 = red)] \n"
"int32 SHAPE_DOOR             = 202 # [width, height, opening angle (0=closed), nr of door leafs, clockwise (0) counterclockwise (1)]\n"
"int32 SHAPE_MAP_DOOR         = 212 # for doors already mapped, same parameters as usual door\n"
"int32 SHAPE_PERSON           = 203\n"
"int32 SHAPE_VEHICLE          = 204\n"
"int32 SHAPE_FIDUCIAL         = 205\n"
"int32 SHAPE_CONE             = 206 # [radius, height]\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distance_min);
      stream.next(m.distance_max);
      stream.next(m.distance_max_id);
      stream.next(m.view_direction);
      stream.next(m.fov_horizontal);
      stream.next(m.fov_vertical);
      stream.next(m.type);
      stream.next(m.objects);
      stream.next(m.sensor_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_object_msgs::ObjectDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_object_msgs::ObjectDetection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distance_min: ";
    Printer<float>::stream(s, indent + "  ", v.distance_min);
    s << indent << "distance_max: ";
    Printer<float>::stream(s, indent + "  ", v.distance_max);
    s << indent << "distance_max_id: ";
    Printer<float>::stream(s, indent + "  ", v.distance_max_id);
    s << indent << "view_direction: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.view_direction);
    s << indent << "fov_horizontal: ";
    Printer<float>::stream(s, indent + "  ", v.fov_horizontal);
    s << indent << "fov_vertical: ";
    Printer<float>::stream(s, indent + "  ", v.fov_vertical);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tuw_object_msgs::ObjectWithCovariance_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "sensor_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_OBJECT_MSGS_MESSAGE_OBJECTDETECTION_H
