// Generated by gencpp from file tuw_local_controller_msgs/ExecutePathFeedback.msg
// DO NOT EDIT!


#ifndef TUW_LOCAL_CONTROLLER_MSGS_MESSAGE_EXECUTEPATHFEEDBACK_H
#define TUW_LOCAL_CONTROLLER_MSGS_MESSAGE_EXECUTEPATHFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tuw_local_controller_msgs
{
template <class ContainerAllocator>
struct ExecutePathFeedback_
{
  typedef ExecutePathFeedback_<ContainerAllocator> Type;

  ExecutePathFeedback_()
    : current_step(0)  {
    }
  ExecutePathFeedback_(const ContainerAllocator& _alloc)
    : current_step(0)  {
  (void)_alloc;
    }



   typedef int32_t _current_step_type;
  _current_step_type current_step;





  typedef boost::shared_ptr< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ExecutePathFeedback_

typedef ::tuw_local_controller_msgs::ExecutePathFeedback_<std::allocator<void> > ExecutePathFeedback;

typedef boost::shared_ptr< ::tuw_local_controller_msgs::ExecutePathFeedback > ExecutePathFeedbackPtr;
typedef boost::shared_ptr< ::tuw_local_controller_msgs::ExecutePathFeedback const> ExecutePathFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator1> & lhs, const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.current_step == rhs.current_step;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator1> & lhs, const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_local_controller_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f693c0c693fe0398ee7588f0a3c6259d";
  }

  static const char* value(const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf693c0c693fe0398ULL;
  static const uint64_t static_value2 = 0xee7588f0a3c6259dULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_local_controller_msgs/ExecutePathFeedback";
  }

  static const char* value(const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 current_step\n"
;
  }

  static const char* value(const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_step);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecutePathFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_local_controller_msgs::ExecutePathFeedback_<ContainerAllocator>& v)
  {
    s << indent << "current_step: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_step);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_LOCAL_CONTROLLER_MSGS_MESSAGE_EXECUTEPATHFEEDBACK_H
