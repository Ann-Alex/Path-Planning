// Generated by gencpp from file tuw_nav_msgs/JointsIWS.msg
// DO NOT EDIT!


#ifndef TUW_NAV_MSGS_MESSAGE_JOINTSIWS_H
#define TUW_NAV_MSGS_MESSAGE_JOINTSIWS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tuw_nav_msgs
{
template <class ContainerAllocator>
struct JointsIWS_
{
  typedef JointsIWS_<ContainerAllocator> Type;

  JointsIWS_()
    : header()
    , type_steering()
    , type_revolute()
    , steering()
    , revolute()  {
    }
  JointsIWS_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type_steering(_alloc)
    , type_revolute(_alloc)
    , steering(_alloc)
    , revolute(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_steering_type;
  _type_steering_type type_steering;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_revolute_type;
  _type_revolute_type type_revolute;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _steering_type;
  _steering_type steering;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _revolute_type;
  _revolute_type revolute;





  typedef boost::shared_ptr< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> const> ConstPtr;

}; // struct JointsIWS_

typedef ::tuw_nav_msgs::JointsIWS_<std::allocator<void> > JointsIWS;

typedef boost::shared_ptr< ::tuw_nav_msgs::JointsIWS > JointsIWSPtr;
typedef boost::shared_ptr< ::tuw_nav_msgs::JointsIWS const> JointsIWSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator1> & lhs, const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type_steering == rhs.type_steering &&
    lhs.type_revolute == rhs.type_revolute &&
    lhs.steering == rhs.steering &&
    lhs.revolute == rhs.revolute;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator1> & lhs, const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a2f4c6789d90337c4c6bcd925166ca7c";
  }

  static const char* value(const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa2f4c6789d90337cULL;
  static const uint64_t static_value2 = 0x4c6bcd925166ca7cULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_nav_msgs/JointsIWS";
  }

  static const char* value(const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Message for sensing/control of an indepenend N wheel steering platform \n"
"Header header\n"
"\n"
"#the type defines the usage and units such as cmd_torque, cmd_acceleration, cmd_velocity, cmd_position, measured_torque, measured_acceleration, measured_velocity, measured_position\n"
"string type_steering\n"
"string type_revolute \n"
"\n"
"#actual sensing/control variables of the defined type\n"
"float64[] steering\n"
"float64[] revolute\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type_steering);
      stream.next(m.type_revolute);
      stream.next(m.steering);
      stream.next(m.revolute);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointsIWS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_nav_msgs::JointsIWS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_nav_msgs::JointsIWS_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type_steering: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_steering);
    s << indent << "type_revolute: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_revolute);
    s << indent << "steering[]" << std::endl;
    for (size_t i = 0; i < v.steering.size(); ++i)
    {
      s << indent << "  steering[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.steering[i]);
    }
    s << indent << "revolute[]" << std::endl;
    for (size_t i = 0; i < v.revolute.size(); ++i)
    {
      s << indent << "  revolute[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.revolute[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_NAV_MSGS_MESSAGE_JOINTSIWS_H
