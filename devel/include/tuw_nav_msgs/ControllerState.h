// Generated by gencpp from file tuw_nav_msgs/ControllerState.msg
// DO NOT EDIT!


#ifndef TUW_NAV_MSGS_MESSAGE_CONTROLLERSTATE_H
#define TUW_NAV_MSGS_MESSAGE_CONTROLLERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tuw_nav_msgs
{
template <class ContainerAllocator>
struct ControllerState_
{
  typedef ControllerState_<ContainerAllocator> Type;

  ControllerState_()
    : header()
    , state(0)
    , progress(0)
    , progress_in_relation_to(0)
    , info()  {
    }
  ControllerState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , progress(0)
    , progress_in_relation_to(0)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _state_type;
  _state_type state;

   typedef uint32_t _progress_type;
  _progress_type progress;

   typedef uint32_t _progress_in_relation_to_type;
  _progress_in_relation_to_type progress_in_relation_to;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _info_type;
  _info_type info;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATE_IDLE)
  #undef STATE_IDLE
#endif
#if defined(_WIN32) && defined(STATE_DRIVING)
  #undef STATE_DRIVING
#endif
#if defined(_WIN32) && defined(STATE_FINISHED)
  #undef STATE_FINISHED
#endif

  enum {
    STATE_IDLE = 0,
    STATE_DRIVING = 1,
    STATE_FINISHED = 2,
  };


  typedef boost::shared_ptr< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerState_

typedef ::tuw_nav_msgs::ControllerState_<std::allocator<void> > ControllerState;

typedef boost::shared_ptr< ::tuw_nav_msgs::ControllerState > ControllerStatePtr;
typedef boost::shared_ptr< ::tuw_nav_msgs::ControllerState const> ControllerStateConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_nav_msgs::ControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_nav_msgs::ControllerState_<ContainerAllocator1> & lhs, const ::tuw_nav_msgs::ControllerState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.progress == rhs.progress &&
    lhs.progress_in_relation_to == rhs.progress_in_relation_to &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_nav_msgs::ControllerState_<ContainerAllocator1> & lhs, const ::tuw_nav_msgs::ControllerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b05c4f3aa52d3fdb601c8ae8cd5811b";
  }

  static const char* value(const ::tuw_nav_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b05c4f3aa52d3fdULL;
  static const uint64_t static_value2 = 0xb601c8ae8cd5811bULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_nav_msgs/ControllerState";
  }

  static const char* value(const ::tuw_nav_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## Progress/State of a trajectory controller\n"
"#################################################################\n"
"\n"
"\n"
"Header header                  # header, ...\n"
"int32  state                   # controller state\n"
"uint32 progress                # passed waypoints \n"
"uint32 progress_in_relation_to # id / seq nummer in oder to put the progess in realtion to a waypoint msg or spline msg\n"
"string info                    # details on the controller state in human form for debugging only \n"
"\n"
"\n"
"\n"
"int32 STATE_IDLE = 0                 # controller is inactive\n"
"int32 STATE_DRIVING = 1              # controller is driving and following a path\n"
"int32 STATE_FINISHED = 2             # controller finished a path\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tuw_nav_msgs::ControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.progress);
      stream.next(m.progress_in_relation_to);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_nav_msgs::ControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_nav_msgs::ControllerState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "progress: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.progress);
    s << indent << "progress_in_relation_to: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.progress_in_relation_to);
    s << indent << "info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_NAV_MSGS_MESSAGE_CONTROLLERSTATE_H
