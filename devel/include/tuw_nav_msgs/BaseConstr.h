// Generated by gencpp from file tuw_nav_msgs/BaseConstr.msg
// DO NOT EDIT!


#ifndef TUW_NAV_MSGS_MESSAGE_BASECONSTR_H
#define TUW_NAV_MSGS_MESSAGE_BASECONSTR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tuw_nav_msgs
{
template <class ContainerAllocator>
struct BaseConstr_
{
  typedef BaseConstr_<ContainerAllocator> Type;

  BaseConstr_()
    : header()
    , v_max(0.0)
    , av_max(0.0)
    , w_max(0.0)
    , aw_max(0.0)
    , omg_wh_max(0.0)  {
    }
  BaseConstr_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , v_max(0.0)
    , av_max(0.0)
    , w_max(0.0)
    , aw_max(0.0)
    , omg_wh_max(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _v_max_type;
  _v_max_type v_max;

   typedef double _av_max_type;
  _av_max_type av_max;

   typedef double _w_max_type;
  _w_max_type w_max;

   typedef double _aw_max_type;
  _aw_max_type aw_max;

   typedef double _omg_wh_max_type;
  _omg_wh_max_type omg_wh_max;





  typedef boost::shared_ptr< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> const> ConstPtr;

}; // struct BaseConstr_

typedef ::tuw_nav_msgs::BaseConstr_<std::allocator<void> > BaseConstr;

typedef boost::shared_ptr< ::tuw_nav_msgs::BaseConstr > BaseConstrPtr;
typedef boost::shared_ptr< ::tuw_nav_msgs::BaseConstr const> BaseConstrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator1> & lhs, const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.v_max == rhs.v_max &&
    lhs.av_max == rhs.av_max &&
    lhs.w_max == rhs.w_max &&
    lhs.aw_max == rhs.aw_max &&
    lhs.omg_wh_max == rhs.omg_wh_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator1> & lhs, const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_nav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3889ce5233d8459f082e82157699ce5e";
  }

  static const char* value(const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3889ce5233d8459fULL;
  static const uint64_t static_value2 = 0x082e82157699ce5eULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_nav_msgs/BaseConstr";
  }

  static const char* value(const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 v_max\n"
"float64 av_max\n"
"float64 w_max\n"
"float64 aw_max\n"
"float64 omg_wh_max\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.v_max);
      stream.next(m.av_max);
      stream.next(m.w_max);
      stream.next(m.aw_max);
      stream.next(m.omg_wh_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseConstr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_nav_msgs::BaseConstr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_nav_msgs::BaseConstr_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "v_max: ";
    Printer<double>::stream(s, indent + "  ", v.v_max);
    s << indent << "av_max: ";
    Printer<double>::stream(s, indent + "  ", v.av_max);
    s << indent << "w_max: ";
    Printer<double>::stream(s, indent + "  ", v.w_max);
    s << indent << "aw_max: ";
    Printer<double>::stream(s, indent + "  ", v.aw_max);
    s << indent << "omg_wh_max: ";
    Printer<double>::stream(s, indent + "  ", v.omg_wh_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_NAV_MSGS_MESSAGE_BASECONSTR_H
