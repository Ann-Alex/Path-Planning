// Generated by gencpp from file tuw_vehicle_msgs/Wheelspeeds.msg
// DO NOT EDIT!


#ifndef TUW_VEHICLE_MSGS_MESSAGE_WHEELSPEEDS_H
#define TUW_VEHICLE_MSGS_MESSAGE_WHEELSPEEDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tuw_vehicle_msgs
{
template <class ContainerAllocator>
struct Wheelspeeds_
{
  typedef Wheelspeeds_<ContainerAllocator> Type;

  Wheelspeeds_()
    : header()
    , fr(0.0)
    , fl(0.0)
    , rr(0.0)
    , rl(0.0)  {
    }
  Wheelspeeds_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fr(0.0)
    , fl(0.0)
    , rr(0.0)
    , rl(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _fr_type;
  _fr_type fr;

   typedef double _fl_type;
  _fl_type fl;

   typedef double _rr_type;
  _rr_type rr;

   typedef double _rl_type;
  _rl_type rl;





  typedef boost::shared_ptr< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> const> ConstPtr;

}; // struct Wheelspeeds_

typedef ::tuw_vehicle_msgs::Wheelspeeds_<std::allocator<void> > Wheelspeeds;

typedef boost::shared_ptr< ::tuw_vehicle_msgs::Wheelspeeds > WheelspeedsPtr;
typedef boost::shared_ptr< ::tuw_vehicle_msgs::Wheelspeeds const> WheelspeedsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator1> & lhs, const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.fr == rhs.fr &&
    lhs.fl == rhs.fl &&
    lhs.rr == rhs.rr &&
    lhs.rl == rhs.rl;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator1> & lhs, const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97e7e563294a622cb3b90a90337982da";
  }

  static const char* value(const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97e7e563294a622cULL;
  static const uint64_t static_value2 = 0xb3b90a90337982daULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_vehicle_msgs/Wheelspeeds";
  }

  static const char* value(const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# speed of the front right wheel in rpm\n"
"float64 fr\n"
"# speed of the front left wheel in rpm\n"
"float64 fl\n"
"# speed of the rear right wheel in rpm\n"
"float64 rr\n"
"# speed of the rear left wheel in rpm\n"
"float64 rl\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fr);
      stream.next(m.fl);
      stream.next(m.rr);
      stream.next(m.rl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Wheelspeeds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_vehicle_msgs::Wheelspeeds_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fr: ";
    Printer<double>::stream(s, indent + "  ", v.fr);
    s << indent << "fl: ";
    Printer<double>::stream(s, indent + "  ", v.fl);
    s << indent << "rr: ";
    Printer<double>::stream(s, indent + "  ", v.rr);
    s << indent << "rl: ";
    Printer<double>::stream(s, indent + "  ", v.rl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_VEHICLE_MSGS_MESSAGE_WHEELSPEEDS_H
