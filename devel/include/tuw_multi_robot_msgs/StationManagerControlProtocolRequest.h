// Generated by gencpp from file tuw_multi_robot_msgs/StationManagerControlProtocolRequest.msg
// DO NOT EDIT!


#ifndef TUW_MULTI_ROBOT_MSGS_MESSAGE_STATIONMANAGERCONTROLPROTOCOLREQUEST_H
#define TUW_MULTI_ROBOT_MSGS_MESSAGE_STATIONMANAGERCONTROLPROTOCOLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tuw_multi_robot_msgs
{
template <class ContainerAllocator>
struct StationManagerControlProtocolRequest_
{
  typedef StationManagerControlProtocolRequest_<ContainerAllocator> Type;

  StationManagerControlProtocolRequest_()
    : request()
    , addition()  {
    }
  StationManagerControlProtocolRequest_(const ContainerAllocator& _alloc)
    : request(_alloc)
    , addition(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _request_type;
  _request_type request;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _addition_type;
  _addition_type addition;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOAD)
  #undef LOAD
#endif
#if defined(_WIN32) && defined(SAVE)
  #undef SAVE
#endif
#if defined(_WIN32) && defined(UPDATE)
  #undef UPDATE
#endif
#if defined(_WIN32) && defined(ONCE)
  #undef ONCE
#endif
#if defined(_WIN32) && defined(CHANGE)
  #undef CHANGE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LOAD;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SAVE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  UPDATE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ONCE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CHANGE;

  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StationManagerControlProtocolRequest_

typedef ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<std::allocator<void> > StationManagerControlProtocolRequest;

typedef boost::shared_ptr< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest > StationManagerControlProtocolRequestPtr;
typedef boost::shared_ptr< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest const> StationManagerControlProtocolRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      StationManagerControlProtocolRequest_<ContainerAllocator>::LOAD =
        
          "load          # command to load a file (addition is the file path)"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      StationManagerControlProtocolRequest_<ContainerAllocator>::SAVE =
        
          "save          # command to save a file (addition is the file path)"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      StationManagerControlProtocolRequest_<ContainerAllocator>::UPDATE =
        
          "update      # command to define update policy"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      StationManagerControlProtocolRequest_<ContainerAllocator>::ONCE =
        
          "once          # addition to publish data once on request"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      StationManagerControlProtocolRequest_<ContainerAllocator>::CHANGE =
        
          "change      # addition to publish data on ever change"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request == rhs.request &&
    lhs.addition == rhs.addition;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_multi_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bebebb77beb0b95affce67ed1687cfd2";
  }

  static const char* value(const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbebebb77beb0b95aULL;
  static const uint64_t static_value2 = 0xffce67ed1687cfd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_multi_robot_msgs/StationManagerControlProtocolRequest";
  }

  static const char* value(const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## Protocol to Send and Receive Station Management Commands\n"
"#################################################################\n"
"\n"
"string      request         # request\n"
"string      addition        # addition, holds information to the request\n"
"\n"
"# request constants\n"
"string LOAD = load          # command to load a file (addition is the file path)\n"
"string SAVE = save          # command to save a file (addition is the file path)\n"
"string UPDATE = update      # command to define update policy\n"
"\n"
"string ONCE = once          # addition to publish data once on request\n"
"string CHANGE = change      # addition to publish data on ever change\n"
"\n"
;
  }

  static const char* value(const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request);
      stream.next(m.addition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StationManagerControlProtocolRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_multi_robot_msgs::StationManagerControlProtocolRequest_<ContainerAllocator>& v)
  {
    s << indent << "request: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.request);
    s << indent << "addition: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.addition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_MULTI_ROBOT_MSGS_MESSAGE_STATIONMANAGERCONTROLPROTOCOLREQUEST_H
