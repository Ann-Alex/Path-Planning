// Generated by gencpp from file tuw_multi_robot_msgs/Graph.msg
// DO NOT EDIT!


#ifndef TUW_MULTI_ROBOT_MSGS_MESSAGE_GRAPH_H
#define TUW_MULTI_ROBOT_MSGS_MESSAGE_GRAPH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <tuw_multi_robot_msgs/Vertex.h>

namespace tuw_multi_robot_msgs
{
template <class ContainerAllocator>
struct Graph_
{
  typedef Graph_<ContainerAllocator> Type;

  Graph_()
    : header()
    , origin()
    , vertices()  {
    }
  Graph_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , origin(_alloc)
    , vertices(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef std::vector< ::tuw_multi_robot_msgs::Vertex_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tuw_multi_robot_msgs::Vertex_<ContainerAllocator> >::other >  _vertices_type;
  _vertices_type vertices;





  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> const> ConstPtr;

}; // struct Graph_

typedef ::tuw_multi_robot_msgs::Graph_<std::allocator<void> > Graph;

typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Graph > GraphPtr;
typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Graph const> GraphConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.origin == rhs.origin &&
    lhs.vertices == rhs.vertices;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_multi_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d3cacdc216cb72e58eac668547de52b";
  }

  static const char* value(const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d3cacdc216cb72eULL;
  static const uint64_t static_value2 = 0x58eac668547de52bULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_multi_robot_msgs/Graph";
  }

  static const char* value(const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## This message is used to transport a graph between two nodes.\n"
"## Each vertex has a set of points and a width describing the\n"
"## shape of it and additionally successors and predecessors\n"
"## to describe the overall structure of the graph \n"
"##\n"
"## Remark for the TUW_Multi_Robot_Router\n"
"## !! all vertices have to be sorted by id\n"
"## !! every id must be present...\n"
"#################################################################\n"
"\n"
"Header header               # Header for Timestamp and Id\n"
"geometry_msgs/Pose origin   # The origin of the map (respectively: offset (the map is moved))\n"
"Vertex[] vertices           # The vertices in the graph (in pixels)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: tuw_multi_robot_msgs/Vertex\n"
"#################################################################\n"
"## A single vertex in a graph \n"
"## Each vertex of the same graph must have a unique id. \n"
"## Successors and Predecessors must have a common start or end\n"
"## point \n"
"#################################################################\n"
"uint32 id                   # Vertex id\n"
"bool valid                  # true if it can be used for planning\n"
"geometry_msgs/Point[] path  # points describing a path from the vertex start to the vertex endpoint\n"
"                            #    the first point in the array reprecents the start and the last the endpoint\n"
"                            #    this points can also be used by the vehciles local path following algorithm \n"
"uint32 weight               # the weight of the vertex (e.g. length of the segment)\n"
"float32 width               # fee space next to the vertex\n"
"uint32[] successors         # edges to successors\n"
"uint32[] predecessors       # edges to predecessor\n"
" \n"
;
  }

  static const char* value(const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.origin);
      stream.next(m.vertices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Graph_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_multi_robot_msgs::Graph_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_multi_robot_msgs::Graph_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tuw_multi_robot_msgs::Vertex_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_MULTI_ROBOT_MSGS_MESSAGE_GRAPH_H
