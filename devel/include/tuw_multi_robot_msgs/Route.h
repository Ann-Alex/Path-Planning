// Generated by gencpp from file tuw_multi_robot_msgs/Route.msg
// DO NOT EDIT!


#ifndef TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTE_H
#define TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <tuw_multi_robot_msgs/RouteSegment.h>

namespace tuw_multi_robot_msgs
{
template <class ContainerAllocator>
struct Route_
{
  typedef Route_<ContainerAllocator> Type;

  Route_()
    : header()
    , segments()  {
    }
  Route_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , segments(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::tuw_multi_robot_msgs::RouteSegment_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tuw_multi_robot_msgs::RouteSegment_<ContainerAllocator> >::other >  _segments_type;
  _segments_type segments;





  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> const> ConstPtr;

}; // struct Route_

typedef ::tuw_multi_robot_msgs::Route_<std::allocator<void> > Route;

typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Route > RoutePtr;
typedef boost::shared_ptr< ::tuw_multi_robot_msgs::Route const> RouteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_multi_robot_msgs::Route_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_multi_robot_msgs::Route_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::Route_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.segments == rhs.segments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_multi_robot_msgs::Route_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::Route_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_multi_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
{
  static const char* value()
  {
    return "725bc552e397bfa7fb11a0c9033b50c1";
  }

  static const char* value(const ::tuw_multi_robot_msgs::Route_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x725bc552e397bfa7ULL;
  static const uint64_t static_value2 = 0xfb11a0c9033b50c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_multi_robot_msgs/Route";
  }

  static const char* value(const ::tuw_multi_robot_msgs::Route_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## used to guide a single vehicle along segments\n"
"#################################################################\n"
"Header header # time of route generation\n"
"RouteSegment[] segments # route segments a robot has to follow\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: tuw_multi_robot_msgs/RouteSegment\n"
"#################################################################\n"
"## Describes a segment on a route with: start, end, width\n"
"## and preconditions for synchronisation to other robots\n"
"#################################################################\n"
"\n"
"int32 segment_id                        # the unique identifier of a segment\n"
"RoutePrecondition[] preconditions       # the preconditions, which have to be met before entering a segment\n"
"geometry_msgs/Pose start                # startpoint of the segment\n"
"geometry_msgs/Pose end                  # endpoint of the segment\n"
"float32 width                           # width of the segment \n"
"\n"
"================================================================================\n"
"MSG: tuw_multi_robot_msgs/RoutePrecondition\n"
"#################################################################\n"
"## Route Preconditions are used to sync robots on a route\n"
"## e.g.: Each robot publishes its current step of its route \n"
"## with such a message\n"
"## The specific segments of a route are marked with such \n"
"## preconditions to block a robot from entering a segment\n"
"## until the sync message of the other robot has the right \n"
"## route_segment_nr\n"
"#################################################################\n"
"\n"
"string robot_id                  # the robot name for the precondition \n"
"int32 current_route_segment      # the segment nr of the route executed by the given robot\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::tuw_multi_robot_msgs::Route_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Route_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_multi_robot_msgs::Route_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_multi_robot_msgs::Route_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tuw_multi_robot_msgs::RouteSegment_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTE_H
