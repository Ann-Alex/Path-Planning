// Generated by gencpp from file tuw_multi_robot_msgs/RouterStatus.msg
// DO NOT EDIT!


#ifndef TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTERSTATUS_H
#define TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTERSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tuw_multi_robot_msgs
{
template <class ContainerAllocator>
struct RouterStatus_
{
  typedef RouterStatus_<ContainerAllocator> Type;

  RouterStatus_()
    : id(0)
    , success(false)
    , missing_robots()
    , duration(0)
    , overall_path_length(0)
    , longest_path_length(0)
    , priority_scheduling_attemps(0)
    , speed_scheduling_attemps(0)  {
    }
  RouterStatus_(const ContainerAllocator& _alloc)
    : id(0)
    , success(false)
    , missing_robots(_alloc)
    , duration(0)
    , overall_path_length(0)
    , longest_path_length(0)
    , priority_scheduling_attemps(0)
    , speed_scheduling_attemps(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _success_type;
  _success_type success;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _missing_robots_type;
  _missing_robots_type missing_robots;

   typedef int32_t _duration_type;
  _duration_type duration;

   typedef int32_t _overall_path_length_type;
  _overall_path_length_type overall_path_length;

   typedef int32_t _longest_path_length_type;
  _longest_path_length_type longest_path_length;

   typedef int32_t _priority_scheduling_attemps_type;
  _priority_scheduling_attemps_type priority_scheduling_attemps;

   typedef int32_t _speed_scheduling_attemps_type;
  _speed_scheduling_attemps_type speed_scheduling_attemps;





  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RouterStatus_

typedef ::tuw_multi_robot_msgs::RouterStatus_<std::allocator<void> > RouterStatus;

typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RouterStatus > RouterStatusPtr;
typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RouterStatus const> RouterStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.success == rhs.success &&
    lhs.missing_robots == rhs.missing_robots &&
    lhs.duration == rhs.duration &&
    lhs.overall_path_length == rhs.overall_path_length &&
    lhs.longest_path_length == rhs.longest_path_length &&
    lhs.priority_scheduling_attemps == rhs.priority_scheduling_attemps &&
    lhs.speed_scheduling_attemps == rhs.speed_scheduling_attemps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_multi_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "155759b83cd058836f14589c98203bee";
  }

  static const char* value(const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x155759b83cd05883ULL;
  static const uint64_t static_value2 = 0x6f14589c98203beeULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_multi_robot_msgs/RouterStatus";
  }

  static const char* value(const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## A message to publish the status of the last route \n"
"## generation\n"
"#################################################################\n"
"\n"
"int32 id # the unique id of the new plan\n"
"bool success # true if a routing table was found to the given scenario\n"
"string[] missing_robots # if the plan fails because of absent robots, these robots are listed here\n"
"int32 duration # the time until a routing table was found\n"
"int32 overall_path_length # the overall path length in the routing table (calculated using weights)\n"
"int32 longest_path_length # the longest path length in a routing table (calculated using weights)\n"
"int32 priority_scheduling_attemps # shows how often robot priorities are exchanged\n"
"int32 speed_scheduling_attemps # shows how many robots speed was reduced during planning\n"
;
  }

  static const char* value(const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.success);
      stream.next(m.missing_robots);
      stream.next(m.duration);
      stream.next(m.overall_path_length);
      stream.next(m.longest_path_length);
      stream.next(m.priority_scheduling_attemps);
      stream.next(m.speed_scheduling_attemps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RouterStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_multi_robot_msgs::RouterStatus_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "missing_robots[]" << std::endl;
    for (size_t i = 0; i < v.missing_robots.size(); ++i)
    {
      s << indent << "  missing_robots[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.missing_robots[i]);
    }
    s << indent << "duration: ";
    Printer<int32_t>::stream(s, indent + "  ", v.duration);
    s << indent << "overall_path_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.overall_path_length);
    s << indent << "longest_path_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.longest_path_length);
    s << indent << "priority_scheduling_attemps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.priority_scheduling_attemps);
    s << indent << "speed_scheduling_attemps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed_scheduling_attemps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTERSTATUS_H
