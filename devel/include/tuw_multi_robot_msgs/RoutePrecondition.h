// Generated by gencpp from file tuw_multi_robot_msgs/RoutePrecondition.msg
// DO NOT EDIT!


#ifndef TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTEPRECONDITION_H
#define TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTEPRECONDITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tuw_multi_robot_msgs
{
template <class ContainerAllocator>
struct RoutePrecondition_
{
  typedef RoutePrecondition_<ContainerAllocator> Type;

  RoutePrecondition_()
    : robot_id()
    , current_route_segment(0)  {
    }
  RoutePrecondition_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , current_route_segment(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_id_type;
  _robot_id_type robot_id;

   typedef int32_t _current_route_segment_type;
  _current_route_segment_type current_route_segment;





  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> const> ConstPtr;

}; // struct RoutePrecondition_

typedef ::tuw_multi_robot_msgs::RoutePrecondition_<std::allocator<void> > RoutePrecondition;

typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RoutePrecondition > RoutePreconditionPtr;
typedef boost::shared_ptr< ::tuw_multi_robot_msgs::RoutePrecondition const> RoutePreconditionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.current_route_segment == rhs.current_route_segment;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator1> & lhs, const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tuw_multi_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5325912e1dc77bd158888f84bb4b040e";
  }

  static const char* value(const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5325912e1dc77bd1ULL;
  static const uint64_t static_value2 = 0x58888f84bb4b040eULL;
};

template<class ContainerAllocator>
struct DataType< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tuw_multi_robot_msgs/RoutePrecondition";
  }

  static const char* value(const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#################################################################\n"
"## Route Preconditions are used to sync robots on a route\n"
"## e.g.: Each robot publishes its current step of its route \n"
"## with such a message\n"
"## The specific segments of a route are marked with such \n"
"## preconditions to block a robot from entering a segment\n"
"## until the sync message of the other robot has the right \n"
"## route_segment_nr\n"
"#################################################################\n"
"\n"
"string robot_id                  # the robot name for the precondition \n"
"int32 current_route_segment      # the segment nr of the route executed by the given robot\n"
;
  }

  static const char* value(const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.current_route_segment);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoutePrecondition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tuw_multi_robot_msgs::RoutePrecondition_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_id);
    s << indent << "current_route_segment: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_route_segment);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TUW_MULTI_ROBOT_MSGS_MESSAGE_ROUTEPRECONDITION_H
